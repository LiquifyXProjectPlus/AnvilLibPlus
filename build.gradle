plugins {
    id 'java'
    id 'eclipse'
    id "maven-publish"
}

group = 'net.liquifymc.integrations'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url "https://repo.dmulloy2.net/repository/public/" }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    mavenLocal()
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.18.2-R0.1-SNAPSHOT'
    compileOnly 'org.spigotmc:spigot:1.18.2-R0.1-SNAPSHOT'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

publishing {
    repositories {
        maven {
            name = "LiquifyAnviGui"
            url = "https://gitlab.com/api/v4/projects/40887307/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = project.findProperty("gitlab.key") ?: System.getenv("AP_DEPLOY_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }

    publications {
        common(MavenPublication) {
            groupId 'net.liquifymc.integrations'
            artifactId project.name

            artifact jar
        }
    }
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs += ["-parameters"]

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
